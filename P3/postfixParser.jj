PARSER_BEGIN(PostFix)
import java.util.HashMap;
/** Simple brace matcher. */
public class PostFix {
    public static SymTable st = new SymTable();

  /** Main entry point. */
  public static void main(String args[]) {
    try {
      PostFix parser = new PostFix(System.in);
      String s = parser.start();
      System.out.println(s);
    } catch (Exception e) {
      System.err.println(e.getMessage());
    }
  }

}

class SymbolAlreadyDefinedException extends Exception {
    public SymbolAlreadyDefinedException(String error){
        super(error);
    }
}

class UnknownSymbolException extends Exception {
    public UnknownSymbolException(String error){
        super(error);
    }
}

class SymTable {
    HashMap<String,String> tb = new HashMap<>();

    void addConstant(String id, String wert) throws SymbolAlreadyDefinedException{
        if (tb.containsKey(id))
            throw new SymbolAlreadyDefinedException("Symbol " + id + " already defined.");
        tb.put(id,wert);
    }

    String getSymbol(String id) throws UnknownSymbolException{
        if(!tb.containsKey(id))
            throw new UnknownSymbolException("Symbol " + id + " not defined.");
        return tb.get(id);
    }
}

PARSER_END(PostFix)


SKIP : {
    " "
  | "\t"
  | "\n"
  | "\r"
  }
  
  TOKEN : {
    <FINAL: "final">
    | <INT: "int">
    | <ident: ["a"-"z"] (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*>
    | < number: "0" | (["1"-"9"] (["0"-"9"])*) >
    | < opsum: "+" | "-" >
    | < opprod: "*" | "/" >
  }
  

/** Root production. */
String start() :
{String s;}
{
    constDecl()
    s=summe()
    <EOF>
    {return s;}
}

String summe():
{String s1; String s2; Token t;}
{
    s1=product() (t=<opsum> s2=product() {s1 = s1 + " " + s2 + " " + t.image;})* {return s1;}
}

String product():
{String s1; String s2; Token t;}
{
    s1=term() (t=<opprod> s2=term() {s1= s1 + " " + s2 + " " + t.image;})* {return s1;}
}

String term():
{String s; Token t;}
{
  t=<ident> {
    try {
        return st.getSymbol(t.image);
    }
    catch (Exception e){
        System.err.println(e.getMessage());
    }
  }
  |  t=<number> {return t.image;}
  | "(" s=summe() ")" {return s;}
}

void constDecl():{}{
    (<FINAL> <INT> constZuw() constList() ";")?
}

void constZuw():{Token id; Token val;}{
    id=<ident> "=" val=<number> {
        try {
            st.addConstant(id.image,val.image);
        }
        catch (Exception e){
            System.err.println(e.getMessage());
        }
    }
}

void constList():{}{
("," constZuw() constList())?
}

