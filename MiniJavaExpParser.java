/* MiniJavaExpParser.java */
/* Generated By:JavaCC: Do not edit this line. MiniJavaExpParser.java */
import java.util.HashMap;
import java.util.HexFormat;
/** Simple brace matcher. */
public class MiniJavaExpParser implements MiniJavaExpParserConstants {
    public static SymTable st = new SymTable();

  /** Main entry point. */
  public static void main(String args[]) {
    try {
      MiniJavaExpParser parser = new MiniJavaExpParser(System.in);
      System.out.println(parser.start());
    } catch (Exception e) {
      System.err.println(e.getMessage());
    }
  }

  public static String numberToHex(String num){
        return String.format("%02x",Integer.valueOf(num));
  }

/** Root production. */
  static final public String start() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String s;
    s = programm();
    jj_consume_token(0);
{if ("" != null) return s + "b1";}
    throw new Error("Missing return statement in function");
}

  static final public String programm() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String vc; String s;
    constDecl();
    vc = varDecl();
    s = statement();
{if ("" != null) return vc + s;}
    throw new Error("Missing return statement in function");
}

  static final public void constDecl() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL:{
      jj_consume_token(FINAL);
      jj_consume_token(INT);
      constZuw();
      constList();
      jj_consume_token(17);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
}

  static final public void constZuw() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {Token id; Token val;
    id = jj_consume_token(ident);
    jj_consume_token(assignOP);
    val = jj_consume_token(number);
st.addConstant(id.image,val.image);
}

  static final public void constList() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      constZuw();
      constList();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
}

  static final public String varDecl() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {Token id; Token val; String var; String s="";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      id = jj_consume_token(ident);
      val = varZuw();
st.addVariable(id.image);
            Symbol sym=st.getSymbol(id.image);
            if (val == null) {s = s + "100036" + numberToHex(sym.val);}
            else {s = s + "10" + numberToHex(val.image) + "36" + numberToHex(sym.val);}
      var = varList();
      jj_consume_token(17);
s = s + var;
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public Token varZuw() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {Token val=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case assignOP:{
      jj_consume_token(assignOP);
      val = jj_consume_token(number);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
{if ("" != null) return val;}
    throw new Error("Missing return statement in function");
}

  static final public String varList() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {Token id; Token val; String var; String s="";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      id = jj_consume_token(ident);
      val = varZuw();
st.addVariable(id.image);
             Symbol sym=st.getSymbol(id.image);
             if (val == null) {s = s + "100036" + numberToHex(sym.val);}
             else {s = s + "10" + numberToHex(val.image) + "36" + numberToHex(sym.val);}
      var = varList();
s = s + var;
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public String expression() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String term; String sum;
    term = term();
    sum = summe();
{if ("" != null) return term + sum;}
    throw new Error("Missing return statement in function");
}

  static final public String summe() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String s="";String term;String sum; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opsum:{
      op = jj_consume_token(opsum);
      term = term();
      sum = summe();
s = term;
            if (op.image.equals("+"))
                s = s + "60";
            else s = s + "64";
            s = s + sum;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public String term() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String fakt; String prod;
    fakt = faktor();
    prod = product();
{if ("" != null) return fakt + prod;}
    throw new Error("Missing return statement in function");
}

  static final public String product() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String s="";String fakt;String prod; Token op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case opprod:{
      op = jj_consume_token(opprod);
      fakt = faktor();
      prod = product();
if (op.image.equals("*"))
                s = fakt + "68" + prod;
            else s = fakt + "6C" + prod;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public String faktor() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String s; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case number:{
      t = jj_consume_token(number);
s = "10" + numberToHex(t.image); {if ("" != null) return s;}
      break;
      }
    case ident:{
      t = jj_consume_token(ident);
if (st.getSymbol(t.image).isVar)
            s = "15" + numberToHex(st.getSymbol(t.image).val);
        else s = "10" + numberToHex(st.getSymbol(t.image).val);
        {if ("" != null) return s;}
      break;
      }
    case 19:{
      jj_consume_token(19);
      s = expression();
      jj_consume_token(20);
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public String statement() throws ParseException, SymbolAlreadyDefinedException, UnknownSymbolException {String s;
    jj_consume_token(PRINT);
    jj_consume_token(19);
    s = expression();
    jj_consume_token(20);
    jj_consume_token(17);
{if ("" != null) return s + "b8(print)";}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaExpParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x40000,0x400,0x4000,0x40000,0x8000,0x10000,0x81800,};
	}

  /** Constructor with InputStream. */
  public MiniJavaExpParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaExpParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaExpParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJavaExpParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJavaExpParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaExpParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaExpParser(MiniJavaExpParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaExpParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class SymbolAlreadyDefinedException extends Exception {
    public SymbolAlreadyDefinedException(String error){
        super(error);
    }
}

class UnknownSymbolException extends Exception {
    public UnknownSymbolException(String error){
        super(error);
    }
}

class Symbol{
      public String val;
      public Boolean isVar;
      public Symbol(String v, Boolean i){
          val=v;
          isVar=i;
      }
}

class SymTable {
    HashMap<String,Symbol> tb = new HashMap<>();
    int nextVarAdress = 1;

    void addConstant(String id, String wert) throws SymbolAlreadyDefinedException{
        if (tb.containsKey(id))
            throw new SymbolAlreadyDefinedException("Symbol " + id + " already defined.");
        tb.put(id,new Symbol(wert,false));
    }

    void addVariable(String id) throws SymbolAlreadyDefinedException{
        if (tb.containsKey(id))
            throw new SymbolAlreadyDefinedException("Symbol " + id + " already defined.");
        tb.put(id,new Symbol(String.valueOf(nextVarAdress++),true));
    }

    Symbol getSymbol(String id) throws UnknownSymbolException{
        if(!tb.containsKey(id))
            throw new UnknownSymbolException("Symbol " + id + " not defined.");
        return tb.get(id);
    }
}
